package jp.kobe_u.cs27.allergydataservice.domain.service;

import jp.kobe_u.cs27.allergydataservice.application.form.AllergicReactionForm;
import jp.kobe_u.cs27.allergydataservice.application.form.UserForm;
import jp.kobe_u.cs27.allergydataservice.configuration.exception.AllergenValidationException;
import jp.kobe_u.cs27.allergydataservice.configuration.exception.UserValidationException;
import jp.kobe_u.cs27.allergydataservice.domain.entity.Allergen;
import jp.kobe_u.cs27.allergydataservice.domain.entity.AllergicReaction;
import jp.kobe_u.cs27.allergydataservice.domain.entity.User;
import jp.kobe_u.cs27.allergydataservice.domain.repository.AllergenRepository;
import jp.kobe_u.cs27.allergydataservice.domain.repository.AllergicReactionRepository;
import jp.kobe_u.cs27.allergydataservice.domain.repository.UserRepository;
import lombok.RequiredArgsConstructor;

import org.hibernate.cache.spi.support.AbstractReadWriteAccess.Item;
import org.springframework.stereotype.Service;

import jakarta.transaction.Transactional;

import java.sql.Timestamp;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Optional;

import static jp.kobe_u.cs27.allergydataservice.configuration.exception.ErrorCode.*;

/**
 * 体調記録・レビューのロジックを提供するサービスクラス
 */
@Service
@RequiredArgsConstructor
public class AllergicReactionService {

  private final AllergenRepository allergen;
  private final UserRepository users;
  private final AllergicReactionRepository allergy;
  private final UserService userService;
  private final AllergicSymptomService allergicSymptomService;

  public AllergicReaction createFoodAllergy(AllergicReactionForm form) {

    // ユーザIDを変数に格納する
    final String uid = form.getUid();

    if(form.getAllergenid() != null){
      validateAllergenDoesNotExist(uid, form.getAllergenid());
    } else {
      validateAllergenDoesNotExistB(uid, form.getAllergenNameByUser()); 
    }

    // ユーザをDBに登録し、登録したユーザの情報を戻り値として返す
    AllergicReaction savedReaction = allergy.save(new AllergicReaction(
        null,
        uid,
        form.getAllergenid(), 
        form.getAllergenNameByUser(),
        form.getContamination(), 
        form.getQuantity(),
        form.getProducingArea(),
        form.getAnaExperience(),
        form.getAnaRisk(),
        form.getComment()
        ));

    Long autoGeneratedId = savedReaction.getReactionid();

    allergicSymptomService.createSymptom(form, autoGeneratedId);

    return savedReaction;
  }

  public AllergicReaction updateFoodAllergy(AllergicReactionForm form, Long reactionid) {

    AllergicReaction newAllergicReaction = new AllergicReaction();
    newAllergicReaction = getAllergyByReactionid(reactionid);
    newAllergicReaction.setContamination(form.getContamination());
    newAllergicReaction.setQuantity(form.getQuantity());
    newAllergicReaction.setProducingArea(form.getProducingArea());
    newAllergicReaction.setAnaExperience(form.getAnaExperience());
    newAllergicReaction.setAnaRisk(form.getAnaRisk());
    newAllergicReaction.setComment(form.getComment());
    
    allergicSymptomService.updateSymptom(form, reactionid);
  
    return allergy.save(newAllergicReaction);

  }


  //指定の反応idを持つアレルギー反応を返す
  public AllergicReaction getAllergyByReactionid(Long reactionid) {
    return allergy.findByReactionid(reactionid);
  }

  //指定のユーザーidとアレルゲンidを持つ反応が既にあるかをチェックする
  public void validateAllergenDoesNotExist(String uid, Long allergenid) {
    AllergicReaction existingAllergen = allergy.findByUidAndAllergenid(uid, allergenid);
    
    if (existingAllergen != null) {
        // レコードが存在する場合、例外をスロー
        throw new AllergenValidationException(
            ALLERGEN_ALREADY_EXISTS,
            "create the allergen",
            "the allergen already registered"
        );
    }
  }

  public void validateAllergenDoesNotExistB(String uid, String allergenName) {
    AllergicReaction existingAllergen = allergy.findByUidAndAllergenNameByUser(uid, allergenName);
    
    if (existingAllergen != null) {
        // レコードが存在する場合、例外をスロー
        throw new AllergenValidationException(
            ALLERGEN_ALREADY_EXISTS,
            "create the allergen",
            "the allergen already registered"
        );
    }
  }

  // 該当IDを持つアレルゲンを削除する
  @Transactional
  public void deleteAllergyByReactionid(Long reactionid) {
    allergy.deleteById(reactionid);  // IDに基づいて削除
  }

  }
